[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"


#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#// PROJECT CONFIGURATION (GENERAL)
#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


[project]
name = "neuronovae"
version = "0.0.0"
description = "DESCRIPTION"
readme = "README.md"
requires-python = ">=3.10, <=4.0"
license = {file = "LICENSE"}
keywords = [
    "Neuroscience",
    "Visualization",
    "Science"
]
authors = [
  {name = "Darik A. O'Neil"}
]
maintainers = [
    {name = "Darik A. O'Neil"}
]
classifiers = [
    "Programming Language :: Python",
]


#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#// PACKAGE DEPENDENCIES
#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


dependencies = [
    "colorcet",
    "matplotlib",
    "numpy",
    "opencv-python",
    "PyQt6",
]


#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#// PACKAGE URLS
#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


[project.urls]
documentation = "https://github.com/darikoneil/neuronovae"
repository = "https://github.com/darikoneil/neuronovae"


#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#// OPTIONAL DEPENDENCIES (INCLUDING TEMPLATE DEPENDENCIES)
#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


[project.optional-dependencies]
testing = [
    "importlib-metadata",
    "pytest",
    "pytest-sugar",
    "pytest-clarity",
    "pytest-html",
    "toml",
    "tomli-w"
]
linting = [
    "black",
    "flake8",
    "flake8-annotations",
    "flake8-annotations-complexity",
    "flake8-builtins",
    "flake8-bugbear",
    "flake8-class-attributes-order",
    "flake8-comprehensions",
    "flake8-dunder-all",
    "flake8-eradicate",
    "flake8-html",
    "flake8-isort",
    "flake8-mutable",
    "flake8-noqa",
    "flake8-rst-docstrings",
    "flake8-simplify",
    "flake8_sphinx_links",
    "flake8-unused-arguments",
    "flake8-use-pathlib",
    "isort",
    "tryceratops",
]
coverage = [
    "coverage[toml]",
    "coveralls",
    "toml",
    "tomli-w"
]
distribution = [
    "build",
    "twine",
]
documentation = [
    "autoclasstoc",
    "autodoc_pydantic",
    "sphinx",
    "sphinx-autodoc-typehints",
    "sphinx-gallery",
    "sphinx-rtd-theme",
]
all = [
    "neuronovae[testing]",
    "neuronovae[linting]",
    "neuronovae[coverage]",
    "neuronovae[distribution]",
    "neuronovae[documentation]",
]


#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#// BUILD CONFIGURATION (SETUPTOOLS)
#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


[tool.setuptools]
packages = [
    "neuronovae",
]


#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#// TESTING CONFIGURATION (PYTEST)
#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


[tool.pytest.ini_options]
addopts = [
    "--import-mode=importlib",
    "-s",
    "--color=yes",
    "-vv",
    "--diff-width=88",
    "--html=./tests/testing-report.html",
]
tests = "tests"
console_output_style = "progress"


#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#// COVERAGE CONFIGURATION (COVERAGE)
#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


[tool.coverage.run]
branch = true
command_line = "-m pytest"
omit = [
    "*/tests/*",
]
dynamic_context = "test_function"

[tool.coverage.report]
fail_under = 75
exclude_also = [
    "def __repr__",
    "def __name__",
    "def __del__",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
    "except ImportError",
    "@(abc\\.)?abstractmethod",
    "@(abc\\.)?abstractproperty",
    "@(abc\\.)?abstractclassmethod",
    "@(abc\\.)?abstractstaticmethod"
]

[tool.coverage.json]
pretty_print = true

[tool.coverage.html]
show_contexts = true
